--- a/ssh.c
+++ b/ssh.c
@@ -577,7 +577,12 @@ set_addrinfo_port(struct addrinfo *addrs, int port)
  * Main program for the ssh client.
  */
 int
+#if defined(__pnacl__) || defined(__nacl__)
+ssh_main(int ac, char **av, const char *subsystem)
+#else
+#define subsystem NULL
 main(int ac, char **av)
+#endif
 {
 	struct ssh *ssh = NULL;
 	int i, r, opt, exit_status, use_syslog, direct, timeout_ms;
@@ -1038,7 +1043,22 @@ main(int ac, char **av)
 	if ((command = sshbuf_new()) == NULL)
 		fatal("sshbuf_new failed");
 
+	if (subsystem) {
+		/*
+		 * Hijack the codeflow now that we're done parsing the command line.
+		 * We want all the flags, but none of the command line.  Unless they
+		 * passed in -s themselves.
+		 */
+		if (!subsystem_flag) {
+			subsystem_flag = 1;
+			av = xcalloc(2, sizeof(*av));
+			av[0] = subsystem;
+			av[1] = NULL;
+			ac = 1;
+		}
+	}
+
 	/*
 	 * Save the command to execute on the remote host in a buffer. There
 	 * is no limit on the length of the command, except by the maximum

We hack the agent code to use a fake IP address which the plugin watches for.
We should have the plugin deal with AF_UNIX requests instead, then we won't
have to hack up OpenSSH.

--- a/authfd.c
+++ b/authfd.c
@@ -90,14 +90,17 @@ ssh_get_authentication_socket(int *fdp)
 ssh_get_authentication_socket_path(const char *authsocket, int *fdp)
 {
 	int sock, oerrno;
-	struct sockaddr_un sunaddr;
+	struct sockaddr_in sunaddr;
+
+	/* Magic value. Keep in sync with //ssh_client/src/file_system.cc */
+	static const int kSshAgentFakeIP = 0x7F010203;
 
 	memset(&sunaddr, 0, sizeof(sunaddr));
-	sunaddr.sun_family = AF_UNIX;
-	strlcpy(sunaddr.sun_path, authsocket, sizeof(sunaddr.sun_path));
+	sunaddr.sin_family = AF_INET;
+	sunaddr.sin_addr.s_addr = htonl(kSshAgentFakeIP);
 
-	if ((sock = socket(AF_UNIX, SOCK_STREAM, 0)) == -1)
+	if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1)
 		return SSH_ERR_SYSTEM_ERROR;
 
 	/* close on exec */

the bind_permitted() check doesn't work well in the nacl env.  leave it to the
host os to do the actual check and deny/permit as makes sense.

daemonized() relies on funcs we don't implement (because we don't need them),
and this func is only used in sshd.  disable it to avoid link failures.

--- a/misc.c
+++ b/misc.c
@@ -1703,6 +1703,7 @@
 	return 1;
 }
 
+#if !defined(__pnacl__) && !defined(__nacl__)
 /* returns 1 if process is already daemonized, 0 otherwise */
 int
 daemonized(void)
@@ -1720,6 +1721,7 @@ daemonized(void)
 	debug3("already daemonized");
 	return 1;
 }
+#endif
 
 
 /*
@@ -2249,6 +2251,9 @@
 	return 0;
 }
 
+#ifndef SA_RESTART
+#define SA_RESTART 0
+#endif
 sshsig_t
 ssh_signal(int signum, sshsig_t handler)
 {

The pnacl toolchain doesn't provide realpath(), but does define the prototype.
This messes up the local replacement logic.

--- a/sftp-realpath.c
+++ b/sftp-realpath.c
@@ -27,6 +27,8 @@
  * SUCH DAMAGE.
  */
 
+#define HAVE_REALPATH 1
+
 #include "includes.h"
 
 #include <sys/types.h>

These statvfs defines might not exist.

--- a/sftp-client.c
+++ b/sftp-client.c
@@ -384,8 +384,13 @@ get_decode_statvfs(struct sftp_conn *conn, struct sftp_statvfs *st,
 	    (r = sshbuf_get_u64(msg, &st->f_namemax)) != 0)
 		fatal("%s: buffer error: %s", __func__, ssh_err(r));
 
+	st->f_flag = 0;
+#ifdef ST_RDONLY
 	st->f_flag = (flag & SSH2_FXE_STATVFS_ST_RDONLY) ? ST_RDONLY : 0;
+#endif
+#ifdef ST_NOSUID
 	st->f_flag |= (flag & SSH2_FXE_STATVFS_ST_NOSUID) ? ST_NOSUID : 0;
+#endif
 
 	sshbuf_free(msg);
 

The pnacl toolchain lacks these standard defines.

--- a/openbsd-compat/glob.c
+++ b/openbsd-compat/glob.c
@@ -87,6 +87,10 @@
 # undef TILDE
 #endif
 
+#ifndef SSIZE_MAX
+#define SSIZE_MAX INT_MAX
+#endif
+
 #define	DOLLAR		'$'
 #define	DOT		'.'
 #define	EOS		'\0'
